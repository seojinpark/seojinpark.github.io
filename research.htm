<!DOCTYPE html>
<!-- saved from url=(0043)https://seojin.people.stanford.edu/research -->
<html lang="en" dir="ltr" class="js">
<!-- <![endif]-->

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <meta name="Generator" content="Drupal 7 (http://drupal.org)">
    <link rel="canonical" href="research.htm">
    <!-- <link rel="shortlink" href="https://seojin.people.stanford.edu/node/5">
    <link rel="shortcut icon" href="https://seojin.people.stanford.edu/sites/all/themes/stanford_light/favicon.ico"
        type="image/vnd.microsoft.icon"> -->
    <!-- Set the viewport width to device width for mobile -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Research | Seo Jin Park</title>
    <link type="text/css" rel="stylesheet" href="./files/css_xE-rWrJf-fncB6ztZfd2huxqgxu4WO-qwma6Xer30m4.css"
        media="all">
    <link type="text/css" rel="stylesheet" href="./files/css_QJjRsV_moFDL86wrnWjOvRaoFry8t8n9lSWVPBzXcZI.css"
        media="all">
    <link type="text/css" rel="stylesheet" href="./files/css_26kxSyvZjerOSqAkUX3FtGUqVOtSu24j5nXzVnaGZiE.css"
        media="all">
    <link type="text/css" rel="stylesheet" href="./files/css_aftEy30V1MA5q0j5yX38mJ2pFUE0rGSpt2miU9X7iYA.css"
        media="all">
    <link type="text/css" rel="stylesheet" href="./files/css_nGZ0EUi6HATidAf3pITrpLdyTGtTsmfVAzXLpUp2gr4.css"
        media="print">
    <link type="text/css" rel="stylesheet" href="./files/styles-light.css" media="all">
    <link type="text/css" rel="stylesheet" href="./files/fonts-sans.css" media="all">
    <script async="" src="./files/analytics.js"></script>
    <script type="text/javascript" src="./files/js_ZDOaep6HA5A0eriyiN-YaNv7MHsjd-FIuFyilZ2o5cw.js"></script>
    <script type="text/javascript" src="./files/js_g98Ekqvuj1mMaUqTkLdcrMmJymw4aFC5YyzBQBviahY.js"></script>
    <script type="text/javascript" src="./files/js_dWhBODswdXXk1M5Z5nyqNfGljmqwxUwAK9i6D0YSDNs.js"></script>
    <script type="text/javascript" src="./files/js_rsGiM5M1ffe6EhN-RnhM5f3pDyJ8ZAPFJNKpfjtepLk.js"></script>
    <script type="text/javascript">
        (function (i, s, o, g, r, a, m) { i["GoogleAnalyticsObject"] = r; i[r] = i[r] || function () { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o), m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m) })(window, document, "script", "https://www.google-analytics.com/analytics.js", "ga"); ga("create", "UA-67505840-1", { "cookieDomain": "auto" }); ga("set", "anonymizeIp", true); ga("send", "pageview");
    </script>
    <script type="text/javascript" src="./files/js_bMNcqAqOcpVB4VGYw6F9HDONHfb363vwhq0fr67kcxM.js"></script>
    <script type="text/javascript" src="./files/js_WvjfmF60nPhaCWviySrT5DgbMTdaEo70t1cVpD7DM4I.js"></script>
    <script type="text/javascript">
                    jQuery.extend(Drupal.settings, { "basePath": "\/", "pathPrefix": "", "ajaxPageState": { "theme": "stanford_light", "theme_token": "GaJamJSHSS2YvuQ85VNLQzvdgJ17J_q4l2s8jzPbt2I", "css": { "modules\/system\/system.base.css": 1, "modules\/system\/system.menus.css": 1, "modules\/system\/system.messages.css": 1, "modules\/system\/system.theme.css": 1, "modules\/comment\/comment.css": 1, "sites\/all\/modules\/contrib\/date\/date_api\/date.css": 1, "modules\/field\/theme\/field.css": 1, "modules\/node\/node.css": 1, "modules\/search\/search.css": 1, "modules\/user\/user.css": 1, "sites\/all\/modules\/contrib\/views\/css\/views.css": 1, "sites\/all\/modules\/contrib\/ctools\/css\/ctools.css": 1, "sites\/all\/themes\/open_framework\/packages\/bootstrap-2.3.1\/css\/bootstrap.min.css": 1, "sites\/all\/themes\/open_framework\/packages\/bootstrap-2.3.1\/css\/bootstrap-responsive.min.css": 1, "sites\/all\/themes\/open_framework\/packages\/font-awesome-3.2.1\/css\/font-awesome.min.css": 1, "sites\/all\/themes\/open_framework\/css\/open_framework.css": 1, "sites\/all\/themes\/stanford_light\/css\/stanford-light.css": 1, "sites\/all\/themes\/open_framework\/css\/open_framework_print.css": 1, "sites\/all\/themes\/stanford_light\/css\/styles-light.css": 1, "sites\/all\/themes\/stanford_light\/css\/fonts-sans.css": 1 }, "js": { "misc\/jquery.js": 1, "sites\/all\/themes\/open_framework\/js\/jquery-migrate-1.2.1.min.js": 1, "misc\/jquery-extend-3.4.0.js": 1, "misc\/jquery.once.js": 1, "misc\/drupal.js": 1, "sites\/all\/modules\/contrib\/google_analytics\/googleanalytics.js": 1, "0": 1, "sites\/all\/themes\/open_framework\/packages\/bootstrap-2.3.1\/js\/bootstrap.min.js": 1, "sites\/all\/themes\/open_framework\/js\/open_framework.js": 1, "sites\/all\/themes\/open_framework\/js\/jquery.placeholder.min.js": 1, "sites\/all\/themes\/open_framework\/js\/override.js": 1, "sites\/all\/themes\/stanford_light\/js\/stanford-light.js": 1 } }, "googleanalytics": { "trackOutbound": 1, "trackMailto": 1, "trackDownload": 1, "trackDownloadExtensions": "7z|aac|arc|arj|asf|asx|avi|bin|csv|doc(x|m)?|dot(x|m)?|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|msi|msp|pdf|phps|png|ppt(x|m)?|pot(x|m)?|pps(x|m)?|ppam|sld(x|m)?|thmx|qtm?|ra(m|r)?|sea|sit|tar|tgz|torrent|txt|wav|wma|wmv|wpd|xls(x|m|b)?|xlt(x|m)|xlam|xml|z|zip" } });
    </script>
    <!--[if IE 7]>
  <link rel="stylesheet" href="/sites/all/themes/open_framework/fontawesome/css/font-awesome-ie7.min.css">
  <![endif]-->
    <!-- IE Fix for HTML5 Tags -->
    <!--[if lt IE 9]>
    <script src="/sites/all/themes/open_framework/js/html5shiv.js"></script>
  <![endif]-->
</head>

<body
    class="html not-front not-logged-in no-sidebars page-node page-node- page-node-5 node-type-page        red-bar         header-bkg-image header-bkg-text-light">
    <div id="wrap">
        <a href="https://seojin.people.stanford.edu/research#content" class="element-invisible element-focusable">
            Skip to content </a>
        <a href="https://seojin.people.stanford.edu/research#main-nav" class="element-invisible element-focusable"
            data-target=".nav-collapse" data-toggle="collapse">
            Skip to navigation </a>
        <!-- /#skipnav -->
        <!-- /#admin-shortcuts -->
        <div id="header" class="clearfix header" role="banner">
            <div class="container">
                <div class="row">
                    <div class="header-section span12">
                        <!-- /#logo -->
                        <div id="name-and-slogan">
                            <div id="site-name" class="site-name">
                                <a href="https://seojin.people.stanford.edu/" title="Home" rel="home">
                                    Seo Jin Park </a>
                            </div>
                            <div id="site-slogan" class="site-slogan">
                                MIT Computer Science and Artificial Intelligence Laboratory </div>
                        </div>
                        <!-- /#name-and-slogan -->
                    </div>
                    <!-- /#site-login -->
                </div>
            </div>
        </div>
        <!-- /#header -->
        <div id="main-menu" class="clearfix site-main-menu">
            <div class="container">
                <div class="navbar">
                    <div class="navbar-inner">
                        <button class="btn btn-navbar collapsed" data-toggle="collapse" data-target=".nav-collapse">
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                            <span class="icon-bar"></span>
                        </button>
                        <div class="nav-collapse collapse">
                            <nav id="main-nav" role="navigation">
                                <ul class="menu nav">
                                    <li class="first leaf"><a href="bio.htm">Bio</a></li>
                                    <li class="leaf active-trail active"><a
                                            href="research.htm"
                                            class="active-trail active">Research</a></li>
                                    <li class="last leaf"><a
                                            href="contacts.htm">Contacts</a></li>
                                </ul> <!-- /#primary-menu -->
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /#main-menu -->
        <div id="main" class="clearfix main" role="main">
            <div class="container">
                <div id="main-content" class="row main-content">
                    <div id="content" class="mc-content span12">
                        <div id="content-wrapper" class="content-wrapper">
                            <div id="content-head" class="row-fluid content-head">
                                <h1 class="title" id="page-title">
                                    Research </h1>
                            </div>
                            <div id="content-body" class="row-fluid content-body">
                                <div class="region region-content clearfix">
                                    <div id="block-system-main" class="clearfix block block-system">
                                        <div class="content">
                                            <article id="node-5" class="node node-page node-promoted clearfix"
                                                about="/research" typeof="foaf:Document"> <span property="dc:title"
                                                    content="Research" class="rdf-meta element-hidden"></span>
                                                <div class="content">
                                                    <div
                                                        class="field field-name-body field-type-text-with-summary field-label-hidden">
                                                        <div class="field-items">
                                                            <div class="field-item even" property="content:encoded">
                                                                <p>&nbsp;</p>
                                                                <h3>Projects</h3>
                                                                <p><strong>Millisort: a distributed sorting for
                                                                        millisecond-scale time budget</strong>&nbsp;[<a
                                                                        href="talk/millisort-PLretreat18.pdf">slide</a>]<br>
                                                                    MilliSort is a new sorting benchmark for massively
                                                                    parallel computing. Its challenge is as follows:
                                                                    “Given an unlimited number of servers in a
                                                                    datacenter, how many small items can be sorted in
                                                                    one millisecond?” We invented a new distributed
                                                                    sorting algorithm which can harness thousands of
                                                                    parallel server nodes for a few milliseonds. The new
                                                                    sorting algorithm minimizes the cost of coordination
                                                                    among nodes and makes the massive parallelization
                                                                    possible. To extrapolate the performance of the new
                                                                    algorithm to very large cluster sizes, we developed
                                                                    a cost simulator. According to the simulator, given
                                                                    a 1 ms time budget, we can sort about 3.7 million
                                                                    100B tuples by harnessing 330 nodes. Given a 10 ms
                                                                    time budget, we can sort 300 million tuples by
                                                                    harnessing 3010 nodes.</p>
                                                                <p><strong>CURP: Consistent Unordered Replication
                                                                        Protocol</strong><strong>&nbsp;</strong>[<a
                                                                        href="https://www.usenix.org/conference/nsdi19/presentation/park"
                                                                        rel="nofollow">paper</a>][<a
                                                                        href="https://youtu.be/pPz3FBFnE7Y"
                                                                        rel="nofollow">video</a>]
                                                                    [<strong>Implementation:</strong> <a
                                                                        href="https://github.com/PlatformLab/RAMCloud/tree/witnessBenchmark"
                                                                        rel="nofollow">RAMCloud</a>, <a
                                                                        href="http://github.com/seojinpark/redis-cplusplus-client"
                                                                        rel="nofollow">Redis-</a><a
                                                                        href="https://github.com/seojinpark/redis-cplusplus-client"
                                                                        rel="nofollow">client</a>, <a
                                                                        href="http://github.com/PlatformLab/consistentRedis"
                                                                        rel="nofollow">Redis-</a><a
                                                                        href="https://github.com/PlatformLab/consistentRedis"
                                                                        rel="nofollow">server</a>, <a
                                                                        href="https://github.com/PlatformLab/RaftFlyer"
                                                                        rel="nofollow">Raft</a>]<br>
                                                                    Traditional approaches to replication require client
                                                                    requests to be ordered before making them durable by
                                                                    copying them to replicas. As a result, clients must
                                                                    wait for two round-trip times (RTTs) before updates
                                                                    complete. On the other hand, Consistent Unordered
                                                                    Replication Protocol (CURP) allows clients to
                                                                    replicate requests that have not yet been ordered,
                                                                    as long as they are commutative. This strategy
                                                                    allows most operations to complete in 1 RTT (the
                                                                    same as an unreplicated system). I implemented CURP
                                                                    in the Redis and RAMCloud storage systems. In
                                                                    RAMCloud, CURP improved write latency by 2x and
                                                                    write throughput by 4x.</p>
                                                                <p><strong>NanoLog: A Nanosecond Scale Logging
                                                                        System</strong>&nbsp;[<a
                                                                        href="https://www.usenix.org/conference/atc18/presentation/yang-stephen"
                                                                        rel="nofollow">paper</a>]<br>
                                                                    NanoLog is a nanosecond scale logging system that is
                                                                    1-2 orders of magnitude faster than existing logging
                                                                    systems such as Log4j2, spdlog, Boost log or Event
                                                                    Tracing for Windows. The system achieves a
                                                                    throughput up to 80 million log messages per second
                                                                    for simple messages and has a typical log invocation
                                                                    overhead of 8-18 nanoseconds, despite exposing a
                                                                    traditional printf-like API. NanoLog slims down user
                                                                    log messages at compile-time by extracting static
                                                                    log components, outputs the log in a compacted,
                                                                    binary format at runtime, and utilizes an offline
                                                                    process to re-inflate the compacted logs. The lower
                                                                    cost of NanoLog allows developers to log more often,
                                                                    log in more detail, and use logging in low-latency
                                                                    production settings where traditional logging
                                                                    mechanisms are too expensive.</p>
                                                                <p><strong>RIFL: Reusable Infrastructure for
                                                                        Linearizability</strong> [<a
                                                                        href="http://dl.acm.org/citation.cfm?id=2815400.2815416&amp;coll=DL&amp;dl=ACM&amp;CFID=720611488&amp;CFTOKEN=24025386"
                                                                        rel="nofollow">paper</a>] [<a
                                                                        href="https://www.youtube.com/watch?v=MkF2wuHaf04&amp;feature=youtu.be"
                                                                        rel="nofollow">video</a>]<br>
                                                                    Linearizability is the strongest form of consistency
                                                                    for concurrent systems, but most large-scale storage
                                                                    systems settle for weaker forms of consistency. RIFL
                                                                    provides a general-purpose mechanism for converting
                                                                    at-least-once RPC semantics to exactly-once
                                                                    semantics, thereby making it easy to turn
                                                                    non-linearizable operations into linearizable ones.
                                                                    RIFL is designed for large-scale systems and is
                                                                    lightweight enough to be used in low-latency
                                                                    environments. RIFL handles data migration by
                                                                    associating linearizability metadata with objects in
                                                                    the underlying store and migrating metadata with the
                                                                    corresponding objects. It uses a lease mechanism to
                                                                    implement garbage collection for metadata. We have
                                                                    implemented RIFL in the RAMCloud storage system and
                                                                    used it to make basic operations such as writes and
                                                                    atomic increments linearizable; RIFL adds only 530
                                                                    ns to the 13.5 us base latency for durable writes.
                                                                    This project is integrated into the main branch of
                                                                    RAMCloud [<a
                                                                        href="https://github.com/PlatformLab/RAMCloud"
                                                                        rel="nofollow">gitHub</a>].</p>
                                                                <p><strong>Distributed Transactions in RAMCloud</strong>
                                                                    [<a href="http://dl.acm.org/citation.cfm?id=2815400.2815416&amp;coll=DL&amp;dl=ACM&amp;CFID=720611488&amp;CFTOKEN=24025386"
                                                                        rel="nofollow">paper</a>]<br>
                                                                    Constructed a new distributed transaction mechanism,
                                                                    with which clients can commit a transaction in 1
                                                                    RTT. Clients send PREPARE requests to servers, and
                                                                    servers respond with votes. The clients can complete
                                                                    the transaction after collecting COMMIT-VOTEs from
                                                                    all participating servers. RIFL's exactly-once
                                                                    mechanism is used to simplify desgin and
                                                                    implementation of the multi-object transaction
                                                                    mechanism; the votes (which is the responses of
                                                                    PREPARE RPCs) are made durable and managed
                                                                    automatically by RIFL. The transaction mechanism can
                                                                    commit simple distributed transactions in about 20
                                                                    us and it outperforms the H-Store main-memory
                                                                    database system for the TPC-C benchmark. This
                                                                    project is integrated into the main branch of
                                                                    RAMCloud [<a
                                                                        href="https://github.com/PlatformLab/RAMCloud"
                                                                        rel="nofollow">gitHub</a>].</p>
                                                                <div><strong>RAMCloud</strong> [<a
                                                                        href="https://ramcloud.atlassian.net/wiki/spaces/RAM/overview"
                                                                        rel="nofollow">website</a>]<br>
                                                                    RAMCloud is a low-latency large-scale distributed
                                                                    key-value storage system. It was designed to provide
                                                                    lowest possible latency while maintaining strong
                                                                    consistency. Working on RAMCloud motivated my other
                                                                    projects, such as CURP, RIFL, and RIFL-based
                                                                    transaction mechanism, which provide the lowest
                                                                    possible latency while keeping strong consistency.
                                                                </div>
                                                                <p>&nbsp;</p>
                                                                <h3>Publications</h3>
                                                                <p><a href="https://dl.acm.org/citation.cfm?id=3343181"
                                                                        rel="nofollow">Toward Scalable Replication Systems with Predictable Tails Using Programmable Data Planes (best paper award)</a><br>
                                                                        Sean Choi, Seo Jin Park, Muhammad Shahbaz, Balaji Prabhakar and Mendel Rosenblum<br>
                                                                        <em>3rd Asia-Pacific Workshop on Networking (APNet'19)</em>, August 2019</p>
                                                                <p><a href="https://www.usenix.org/conference/nsdi19/presentation/park"
                                                                        rel="nofollow">Exploiting Commutativity For
                                                                        Practical Fast Replication</a><br>
                                                                    Seo Jin Park and John Ousterhout<br><em>16th USENIX
                                                                        Symposium on Networked Systems Design and
                                                                        Implementation (NSDI’19)</em>, February 2019</p>
                                                                <p><a href="https://www.usenix.org/conference/atc18/presentation/yang-stephen"
                                                                        rel="nofollow">NanoLog: A Nanosecond Scale
                                                                        Logging System</a><br>
                                                                    Stephen Yang, Seo Jin Park and John
                                                                    Ousterhout<br><i>2018 USENIX Annual Technical
                                                                        Conference (ATC’18), </i>July 2018</p>
                                                                <p><a href="http://dl.acm.org/citation.cfm?id=2815400.2815416&amp;coll=DL&amp;dl=ACM&amp;CFID=720611488&amp;CFTOKEN=24025386"
                                                                        rel="nofollow">Implementing Linearizability at
                                                                        Large Scale and Low Latency</a><br>
                                                                    Collin Lee*, Seo Jin Park*, Ankita Kejriwal, Satoshi
                                                                    Matsushita, and John Ousterhout (*co-first
                                                                    author)<br><span>The 25th ACM Symposium on Operating
                                                                        Systems
                                                                        Principles&nbsp;</span><em>(SOSP'15)</em>,
                                                                    October 2015</p>
                                                                <p><a href="http://dl.acm.org/citation.cfm?id=2806887"
                                                                        rel="nofollow">The RAMCloud Storage
                                                                        System</a><br>
                                                                    John Ousterhout, Arjun Gopalan, Ashish Gupta, Ankita
                                                                    Kejriwal, Collin Lee, Behnam Montazeri, Diego
                                                                    Ongaro, Seo Jin Park, Henry Qin, Mendel Rosenblum,
                                                                    Stephen Rumble, Ryan Stutsman, and Stephen
                                                                    Yang<br><em>ACM Transactions on Computer Systems
                                                                        (TOCS) 33, 3, Article 7,</em>&nbsp;August 2015
                                                                </p>
                                                                <p><a href="http://hdl.handle.net/1721.1/85219"
                                                                        rel="nofollow">Analyzing performance and
                                                                        usability of broadcast-based inter-core
                                                                        communication (ATAC) on manycore
                                                                        architecture</a><br>
                                                                    Master's thesis, Massachusetts Institute of
                                                                    Technology, Cambridge, MA, USA, Jun 2013</p>
                                                                <p>&nbsp;</p>
                                                                <h3>Presentations</h3>
                                                                <h4>Millisort</h4>
                                                                <ul>
                                                                    <li>
                                                                        <p><span>Oral presentation on&nbsp;</span><a
                                                                                href="talk/millisort-PLretreat18.pdf">Millisort:
                                                                                An Experiment in Granular Computing</a>
                                                                            at <a
                                                                                href="https://platformlab.stanford.edu/events-retreats.php">PlatformLab
                                                                                retreat</a>, Jun 2018</p>
                                                                    </li>
                                                                </ul>
                                                                <h4>Consistency in Asynchronous Replication</h4>
                                                                <ul>
                                                                    <li><span>Oral presentation on <a
                                                                                href="http://youtu.be/pPz3FBFnE7Y"
                                                                                rel="nofollow">Exploiting Commutativity
                                                                                For Practical Fast Replication</a> at <a
                                                                                href="https://www.usenix.org/conference/nsdi19"
                                                                                rel="nofollow">NSDI'19</a>, Feb
                                                                            2019</span></li>
                                                                    <li><span><span>Oral presentation on</span>&nbsp;<a
                                                                                href="talk/CURP-samsara.pdf">Exploiting
                                                                                Commutativity For Practical Fast
                                                                                Replication</a></span><span>&nbsp;at <a
                                                                                href="https://www.samsara.com/"
                                                                                rel="nofollow">Samsara</a></span><span>,
                                                                            Nov 2017</span></li>
                                                                    <li><span>Oral presentation on&nbsp;<a
                                                                                href="talk/PlatformRetreat16.pdf">Making
                                                                                RAMCloud Writes Even
                                                                                Faster</a></span><span>&nbsp;at&nbsp;</span><a
                                                                            href="http://platformlab.stanford.edu/events-retreats.html"><span>PlatformLab&nbsp;r</span><span>etreat</span></a><span>,
                                                                            Jun 2016</span></li>
                                                                </ul>
                                                                <h4>Linearizability and Transactions</h4>
                                                                <ul>
                                                                    <li><span>Oral presentation on <a
                                                                                href="https://ramcloud.atlassian.net/wiki/download/attachments/6848659/SOSP15_seojin.pdf?version=1&amp;modificationDate=1444551617830&amp;api=v2"
                                                                                rel="nofollow">Implementing
                                                                                Linearizability at Large Scale and Low
                                                                                Latency</a></span><span>&nbsp;</span><span>[<a
                                                                                href="https://www.youtube.com/watch?v=MkF2wuHaf04&amp;feature=youtu.be"
                                                                                rel="nofollow">Video</a>]</span><span>&nbsp;at
                                                                        </span><a
                                                                            href="http://www.ssrc.ucsc.edu/sosp15/"
                                                                            rel="nofollow">SOSP15</a><span>, Oct
                                                                            2015</span></li>
                                                                    <li><span><span>Oral presentation on <a
                                                                                    href="https://ramcloud.atlassian.net/wiki/download/attachments/6848659/SEDCL_retreat_2015_tx_performance.pdf?version=2&amp;modificationDate=1434004840216&amp;api=v2"
                                                                                    rel="nofollow">Performance of
                                                                                    Transactions in RAMCloud</a>&nbsp;at
                                                                                <a
                                                                                    href="http://sedcl.stanford.edu/">SEDCL</a>
                                                                                retreat, May 2015</span></span></li>
                                                                    <li><span>Oral presentation on <a
                                                                                href="https://ramcloud.atlassian.net/wiki/download/attachments/6848659/SEDCL_forum_2015_tx.pdf?version=1&amp;modificationDate=1422919347411&amp;api=v2"
                                                                                rel="nofollow">Transactions on
                                                                                RAMCloud</a>&nbsp;at <a
                                                                                href="http://sedcl.stanford.edu/">SEDCL</a>
                                                                            forum, Jan 2015</span></li>
                                                                    <li><span>Oral presentation on&nbsp;</span><span><a
                                                                                href="https://ramcloud.atlassian.net/wiki/download/attachments/6848659/SDECL.pdf?version=1&amp;modificationDate=1403498867444&amp;api=v2"
                                                                                rel="nofollow">Infrastructure for
                                                                                Linearizable RPCs in
                                                                                RAMCloud</a>&nbsp;at <a
                                                                                href="http://sedcl.stanford.edu/">SEDCL</a>
                                                                            retreat, Jun 2014</span></li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </article>
                                        </div>
                                    </div>
                                </div>
                                <!-- /.region -->
                            </div>
                        </div>
                        <!-- /#content-wrap -->
                    </div>
                    <!-- /#content -->
                </div>
            </div>
        </div>
        <!-- /#main, /#main-wrapper -->
        <div id="push"></div>
        <!-- /#push -->
    </div>
    <!-- /#wrap -->



</body>

</html>